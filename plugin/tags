!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AdjustFontSize	gtk2fontsize.vim	/^function! AdjustFontSize(amount)$/;"	f
BreakPoint	debugger.py	/^class BreakPoint:$/;"	c
CloseSession	session.vim	/^command! -bar -bang CloseSession call xolox#session#close_cmd(<q-bang>, 0)$/;"	c
DbgProtocol	debugger.py	/^class DbgProtocol:$/;"	c
DebugUI	debugger.py	/^class DebugUI:$/;"	c
Debugger	debugger.py	/^class Debugger:$/;"	c
DeleteSession	session.vim	/^command! -bar -bang -nargs=? -complete=customlist,xolox#session#complete_names DeleteSession call xolox#session#delete_cmd(<q-args>, <q-bang>)$/;"	c
EclimBaseDir	eclim.vim	/^function! EclimBaseDir()$/;"	f
EclimValidate	eclim.vim	/^  command EclimValidate :call <SID>Validate()$/;"	c
HelpWindow	debugger.py	/^class HelpWindow(VimWindow):$/;"	c
Init	eclim.vim	/^function! s:Init() " {{{$/;"	f
LargerFont	gtk2fontsize.vim	/^command! LargerFont call LargerFont()$/;"	c
LargerFont	gtk2fontsize.vim	/^function! LargerFont()$/;"	f
LogWindow	debugger.py	/^class LogWindow(VimWindow):$/;"	c
MRU	mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete MRU$/;"	c
MRU_AddFile	mru.vim	/^function! s:MRU_AddFile(acmd_bufnr)$/;"	f
MRU_Add_Menu	mru.vim	/^    let MRU_Add_Menu = 1$/;"	v
MRU_Auto_Close	mru.vim	/^    let MRU_Auto_Close = 1$/;"	v
MRU_Cmd	mru.vim	/^function! s:MRU_Cmd(pat)$/;"	f
MRU_Complete	mru.vim	/^function! s:MRU_Complete(ArgLead, CmdLine, CursorPos)$/;"	f
MRU_Edit_File	mru.vim	/^function! s:MRU_Edit_File(filename, sanitized)$/;"	f
MRU_Exclude_Files	mru.vim	/^    let MRU_Exclude_Files = ''$/;"	v
MRU_File	mru.vim	/^                let MRU_File = $USERPROFILE . '\\_vim_mru_files'$/;"	v
MRU_File	mru.vim	/^        let MRU_File = $HOME . '\/.vim_mru_files'$/;"	v
MRU_File	mru.vim	/^        let MRU_File = $VIM . '\/_vim_mru_files'$/;"	v
MRU_Include_Files	mru.vim	/^    let MRU_Include_Files = ''$/;"	v
MRU_LoadList	mru.vim	/^function! s:MRU_LoadList()$/;"	f
MRU_Max_Entries	mru.vim	/^    let MRU_Max_Entries = 100$/;"	v
MRU_Max_Menu_Entries	mru.vim	/^    let MRU_Max_Menu_Entries = 10$/;"	v
MRU_Max_Submenu_Entries	mru.vim	/^    let MRU_Max_Submenu_Entries = 10$/;"	v
MRU_Open_File_In_Tab	mru.vim	/^function! s:MRU_Open_File_In_Tab(fname, esc_fname)$/;"	f
MRU_Open_File_Use_Tabs	mru.vim	/^    let MRU_Open_File_Use_Tabs = 0$/;"	v
MRU_Open_Window	mru.vim	/^function! s:MRU_Open_Window(...)$/;"	f
MRU_Refresh_Menu	mru.vim	/^function! s:MRU_Refresh_Menu()$/;"	f
MRU_SaveList	mru.vim	/^function! s:MRU_SaveList()$/;"	f
MRU_Select_File_Cmd	mru.vim	/^function! s:MRU_Select_File_Cmd(opt) range$/;"	f
MRU_Use_Current_Window	mru.vim	/^    let MRU_Use_Current_Window = 0$/;"	v
MRU_Warn_Msg	mru.vim	/^function! s:MRU_Warn_Msg(msg)$/;"	f
MRU_Window_Edit_File	mru.vim	/^function! s:MRU_Window_Edit_File(fname, multi, edit_type, open_type)$/;"	f
MRU_Window_Height	mru.vim	/^    let MRU_Window_Height = 8$/;"	v
MRU_Window_Open_Always	mru.vim	/^    let MRU_Window_Open_Always = 0$/;"	v
MRU_add_files_to_menu	mru.vim	/^function! s:MRU_add_files_to_menu(prefix, file_list)$/;"	f
MRU_escape_filename	mru.vim	/^function! s:MRU_escape_filename(fname)$/;"	f
Mru	mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete Mru$/;"	c
OpenSession	session.vim	/^command! -bar -bang -nargs=? -complete=customlist,xolox#session#complete_names OpenSession call xolox#session#open_cmd(<q-args>, <q-bang>)$/;"	c
PluginSession	session.vim	/^augroup PluginSession$/;"	a
Rename	Rename.vim	/^command! -nargs=* -complete=file -bang Rename call Rename(<q-args>, '<bang>')$/;"	c
Rename	Rename.vim	/^function! Rename(name, bang)$/;"	f
RestartVim	session.vim	/^command! -bang -nargs=* -complete=command RestartVim call xolox#session#restart_cmd(<q-bang>, <q-args>)$/;"	c
SaveSession	session.vim	/^command! -bar -bang -nargs=? -complete=customlist,xolox#session#complete_names SaveSession call xolox#session#save_cmd(<q-args>, <q-bang>)$/;"	c
SessionClose	session.vim	/^  command! -bar -bang SessionClose call xolox#session#close_cmd(<q-bang>, 0)$/;"	c
SessionDelete	session.vim	/^  command! -bar -bang -nargs=? -complete=customlist,xolox#session#complete_names SessionDelete call xolox#session#delete_cmd(<q-args>, <q-bang>)$/;"	c
SessionOpen	session.vim	/^  command! -bar -bang -nargs=? -complete=customlist,xolox#session#complete_names SessionOpen call xolox#session#open_cmd(<q-args>, <q-bang>)$/;"	c
SessionSave	session.vim	/^  command! -bar -bang -nargs=? -complete=customlist,xolox#session#complete_names SessionSave call xolox#session#save_cmd(<q-args>, <q-bang>)$/;"	c
SessionView	session.vim	/^  command! -bar -nargs=? -complete=customlist,xolox#session#complete_names SessionView call xolox#session#view_cmd(<q-args>)$/;"	c
SmallerFont	gtk2fontsize.vim	/^command! SmallerFont call SmallerFont()$/;"	c
SmallerFont	gtk2fontsize.vim	/^function! SmallerFont()$/;"	f
StackWindow	debugger.py	/^class StackWindow(VimWindow):$/;"	c
TraceWindow	debugger.py	/^class TraceWindow(VimWindow):$/;"	c
Validate	eclim.vim	/^function! s:Validate()$/;"	f
Validate7	eclim.vim	/^function! s:Validate7() " {{{$/;"	f
ViewSession	session.vim	/^command! -bar -nargs=? -complete=customlist,xolox#session#complete_names ViewSession call xolox#session#view_cmd(<q-args>)$/;"	c
VimWindow	debugger.py	/^class VimWindow:$/;"	c
WatchWindow	debugger.py	/^class WatchWindow(VimWindow):$/;"	c
__init__	debugger.py	/^  def __init__(self):$/;"	m	class:BreakPoint
__init__	debugger.py	/^  def __init__(self, minibufexpl = 0):$/;"	m	class:DebugUI
__init__	debugger.py	/^  def __init__(self, name = 'DEBUG_WINDOW'):$/;"	m	class:VimWindow
__init__	debugger.py	/^  def __init__(self, name = 'HELP__WINDOW'):$/;"	m	class:HelpWindow
__init__	debugger.py	/^  def __init__(self, name = 'LOG___WINDOW'):$/;"	m	class:LogWindow
__init__	debugger.py	/^  def __init__(self, name = 'STACK_WINDOW'):$/;"	m	class:StackWindow
__init__	debugger.py	/^  def __init__(self, name = 'TRACE_WINDOW'):$/;"	m	class:TraceWindow
__init__	debugger.py	/^  def __init__(self, name = 'WATCH_WINDOW'):$/;"	m	class:WatchWindow
__init__	debugger.py	/^  def __init__(self, port = 9000):$/;"	m	class:DbgProtocol
__init__	debugger.py	/^  def __init__(self, port = 9000, max_children = '32', max_data = '1024', max_depth = '1', minibufexpl = '0', debug = 0):$/;"	m	class:Debugger
_xml_stringfy	debugger.py	/^  def _xml_stringfy(self, node, level = 0, encoding = None):$/;"	m	class:VimWindow
accept	debugger.py	/^  def accept(self):$/;"	m	class:DbgProtocol
add	debugger.py	/^  def add(self, file, line, exp = ''):$/;"	m	class:BreakPoint
base64	debugger.py	/^import base64$/;"	i
clean	debugger.py	/^  def clean(self):$/;"	m	class:VimWindow
clear	debugger.py	/^  def clear(self):$/;"	m	class:BreakPoint
clear	debugger.py	/^  def clear(self):$/;"	m	class:Debugger
close	debugger.py	/^  def close(self):$/;"	m	class:DbgProtocol
command	debugger.py	/^  def command(self, cmd):$/;"	m	class:VimWindow
command	debugger.py	/^  def command(self, cmd, arg1 = '', arg2 = ''):$/;"	m	class:Debugger
create	debugger.py	/^  def create(self):$/;"	m	class:DebugUI
create	debugger.py	/^  def create(self, method = 'new'):$/;"	m	class:VimWindow
debug_mode	debugger.py	/^  def debug_mode(self):$/;"	m	class:DebugUI
debugger_command	debugger.py	/^def debugger_command(msg, arg1 = '', arg2 = ''):$/;"	f
debugger_context	debugger.py	/^def debugger_context():$/;"	f
debugger_down	debugger.py	/^def debugger_down():$/;"	f
debugger_init	debugger.py	/^def debugger_init(debug = 0):$/;"	f
debugger_mark	debugger.py	/^def debugger_mark(exp = ''):$/;"	f
debugger_property	debugger.py	/^def debugger_property(name = ''):$/;"	f
debugger_quit	debugger.py	/^def debugger_quit():$/;"	f
debugger_resize	debugger.py	/^def debugger_resize():$/;"	f
debugger_run	debugger.py	/^def debugger_run():$/;"	f
debugger_up	debugger.py	/^def debugger_up():$/;"	f
debugger_watch_input	debugger.py	/^def debugger_watch_input(cmd, arg = ''):$/;"	f
destroy	debugger.py	/^  def destroy(self):$/;"	m	class:DebugUI
destroy	debugger.py	/^  def destroy(self):$/;"	m	class:VimWindow
dom	debugger.py	/^import xml.dom.minidom$/;"	i
down	debugger.py	/^  def down(self):$/;"	m	class:Debugger
find	debugger.py	/^  def find(self, file, line):$/;"	m	class:BreakPoint
fixup_childs	debugger.py	/^  def fixup_childs(self, line, node, level):$/;"	m	class:VimWindow
fixup_childs	debugger.py	/^  def fixup_childs(self, line, node, level):$/;"	m	class:WatchWindow
fixup_single	debugger.py	/^  def fixup_single(self, line, node, level):$/;"	m	class:VimWindow
fixup_single	debugger.py	/^  def fixup_single(self, line, node, level):$/;"	m	class:WatchWindow
g:loaded_session	session.vim	/^let g:loaded_session = 1$/;"	v
g:session_autoload	session.vim	/^  let g:session_autoload = 'prompt'$/;"	v
g:session_autosave	session.vim	/^  let g:session_autosave = 'prompt'$/;"	v
g:session_command_aliases	session.vim	/^  let g:session_command_aliases = 0$/;"	v
g:session_default_to_last	session.vim	/^  let g:session_default_to_last = 0$/;"	v
g:session_directory	session.vim	/^    let g:session_directory = '~\/.vim\/sessions'$/;"	v
g:session_directory	session.vim	/^    let g:session_directory = '~\\vimfiles\\sessions'$/;"	v
g:session_persist_globals	session.vim	/^  let g:session_persist_globals = []$/;"	v
g:session_restart_environment	session.vim	/^  let g:session_restart_environment = ['TERM', 'VIM', 'VIMRUNTIME']$/;"	v
get_command	debugger.py	/^  def get_command(self):$/;"	m	class:WatchWindow
getexp	debugger.py	/^  def getexp(self, bno):$/;"	m	class:BreakPoint
getfile	debugger.py	/^  def getfile(self, bno):$/;"	m	class:BreakPoint
getid	debugger.py	/^  def getid(self, bno):$/;"	m	class:BreakPoint
getline	debugger.py	/^  def getline(self, bno):$/;"	m	class:BreakPoint
getwinnr	debugger.py	/^  def getwinnr(self):$/;"	m	class:VimWindow
go_srcview	debugger.py	/^  def go_srcview(self):$/;"	m	class:DebugUI
handle_init	debugger.py	/^  def handle_init(self, res):$/;"	m	class:Debugger
handle_msg	debugger.py	/^  def handle_msg(self, res):$/;"	m	class:Debugger
handle_response	debugger.py	/^  def handle_response(self, res):$/;"	m	class:Debugger
handle_response_breakpoint_set	debugger.py	/^  def handle_response_breakpoint_set(self, res):$/;"	m	class:Debugger
handle_response_context_get	debugger.py	/^  def handle_response_context_get(self, res):$/;"	m	class:Debugger
handle_response_default	debugger.py	/^  def handle_response_default(self, res):$/;"	m	class:Debugger
handle_response_error	debugger.py	/^  def handle_response_error(self, res):$/;"	m	class:Debugger
handle_response_eval	debugger.py	/^  def handle_response_eval(self, res):$/;"	m	class:Debugger
handle_response_feature_set	debugger.py	/^  def handle_response_feature_set(self, res):$/;"	m	class:Debugger
handle_response_property_get	debugger.py	/^  def handle_response_property_get(self, res):$/;"	m	class:Debugger
handle_response_run	debugger.py	/^  def handle_response_run(self, res):$/;"	m	class:Debugger
handle_response_stack_get	debugger.py	/^  def handle_response_stack_get(self, res):$/;"	m	class:Debugger
handle_response_step_into	debugger.py	/^  def handle_response_step_into(self, res):$/;"	m	class:Debugger
handle_response_step_out	debugger.py	/^  def handle_response_step_out(self, res):$/;"	m	class:Debugger
handle_response_step_over	debugger.py	/^  def handle_response_step_over(self, res):$/;"	m	class:Debugger
highlight_stack	debugger.py	/^  def highlight_stack(self, no):$/;"	m	class:StackWindow
input	debugger.py	/^  def input(self, mode, arg = ''):$/;"	m	class:WatchWindow
isconnected	debugger.py	/^  def isconnected(self):$/;"	m	class:DbgProtocol
isprepared	debugger.py	/^  def isprepared(self):$/;"	m	class:VimWindow
list	debugger.py	/^  def list(self):$/;"	m	class:BreakPoint
loaded_mru	mru.vim	/^let loaded_mru=1$/;"	v
mark	debugger.py	/^  def mark(self, exp = ''):$/;"	m	class:Debugger
minidom	debugger.py	/^import xml.dom.minidom$/;"	i
mode	debugger.py	/^mode = 0$/;"	v
next_sign	debugger.py	/^  def next_sign(self):$/;"	m	class:DebugUI
normal_mode	debugger.py	/^  def normal_mode(self):$/;"	m	class:DebugUI
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:HelpWindow
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:LogWindow
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:StackWindow
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:TraceWindow
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:VimWindow
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:WatchWindow
os	debugger.py	/^import os$/;"	i
prepare	debugger.py	/^  def prepare(self):$/;"	m	class:VimWindow
property_get	debugger.py	/^  def property_get(self, name = ''):$/;"	m	class:Debugger
quit	debugger.py	/^  def quit(self):$/;"	m	class:Debugger
recv	debugger.py	/^  def recv(self, count=10000):$/;"	m	class:Debugger
recv_body	debugger.py	/^  def recv_body(self, to_recv):$/;"	m	class:DbgProtocol
recv_length	debugger.py	/^  def recv_length(self):$/;"	m	class:DbgProtocol
recv_msg	debugger.py	/^  def recv_msg(self):$/;"	m	class:DbgProtocol
recv_null	debugger.py	/^  def recv_null(self):$/;"	m	class:DbgProtocol
remove	debugger.py	/^  def remove(self, bno):$/;"	m	class:BreakPoint
run	debugger.py	/^  def run(self):$/;"	m	class:Debugger
s:cpo_save	mru.vim	/^let s:cpo_save = &cpo$/;"	v
s:directory	session.vim	/^let s:directory = fnamemodify(g:session_directory, ':p')$/;"	v
s:esc_filename_chars	mru.vim	/^let s:esc_filename_chars = ' *?[{`$%#"|!<>();&' . "'\\t\\n"$/;"	v
s:maxfontsize	gtk2fontsize.vim	/^let s:maxfontsize = 16$/;"	v
s:minfontsize	gtk2fontsize.vim	/^let s:minfontsize = 6$/;"	v
s:mru_list_locked	mru.vim	/^let s:mru_list_locked = 0$/;"	v
s:msg	session.vim	/^  let s:msg = "session.vim %s: The sessions directory %s isn't writable!"$/;"	v
s:pattern	gtk2fontsize.vim	/^let s:pattern = '^\\(.* \\)\\([1-9][0-9]*\\)$'$/;"	v
s:required_version	eclim.vim	/^let s:required_version = 700$/;"	v
send	debugger.py	/^  def send(self, msg):$/;"	m	class:Debugger
send_command	debugger.py	/^  def send_command(self, cmd, arg1 = '', arg2 = ''):$/;"	m	class:Debugger
send_msg	debugger.py	/^  def send_msg(self, cmd):$/;"	m	class:DbgProtocol
set_highlight	debugger.py	/^  def set_highlight(self):$/;"	m	class:DebugUI
set_srcview	debugger.py	/^  def set_srcview(self, file, line):$/;"	m	class:DebugUI
setid	debugger.py	/^  def setid(self, bno, id):$/;"	m	class:BreakPoint
socket	debugger.py	/^import socket$/;"	i
stop	debugger.py	/^  def stop(self):$/;"	m	class:Debugger
sys	debugger.py	/^import sys$/;"	i
traceback	debugger.py	/^import traceback$/;"	i
up	debugger.py	/^  def up(self):$/;"	m	class:Debugger
vim	debugger.py	/^import vim$/;"	i
watch_execute	debugger.py	/^  def watch_execute(self):$/;"	m	class:Debugger
watch_input	debugger.py	/^  def watch_input(self, mode, arg = ''):$/;"	m	class:Debugger
write	debugger.py	/^  def write(self, msg):$/;"	m	class:VimWindow
write_xml	debugger.py	/^  def write_xml(self, xml):$/;"	m	class:VimWindow
write_xml_childs	debugger.py	/^  def write_xml_childs(self, xml):$/;"	m	class:VimWindow
xml	debugger.py	/^import xml.dom.minidom$/;"	i
xml_on_attribute	debugger.py	/^  def xml_on_attribute(self, node):$/;"	m	class:VimWindow
xml_on_cdata_section	debugger.py	/^  def xml_on_cdata_section(self, node):$/;"	m	class:VimWindow
xml_on_cdata_section	debugger.py	/^  def xml_on_cdata_section(self, node):$/;"	m	class:WatchWindow
xml_on_comment	debugger.py	/^  def xml_on_comment(self, node):$/;"	m	class:VimWindow
xml_on_document	debugger.py	/^  def xml_on_document(self, node):$/;"	m	class:VimWindow
xml_on_document_type	debugger.py	/^  def xml_on_document_type(self, node):$/;"	m	class:VimWindow
xml_on_element	debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:StackWindow
xml_on_element	debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:TraceWindow
xml_on_element	debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:VimWindow
xml_on_element	debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:WatchWindow
xml_on_entity	debugger.py	/^  def xml_on_entity(self, node):$/;"	m	class:VimWindow
xml_on_notation	debugger.py	/^  def xml_on_notation(self, node):$/;"	m	class:VimWindow
xml_on_processing_instruction	debugger.py	/^  def xml_on_processing_instruction(self, node):$/;"	m	class:VimWindow
xml_on_text	debugger.py	/^  def xml_on_text(self, node):$/;"	m	class:VimWindow
xml_on_text	debugger.py	/^  def xml_on_text(self, node):$/;"	m	class:WatchWindow
xml_stringfy	debugger.py	/^  def xml_stringfy(self, xml):$/;"	m	class:VimWindow
xml_stringfy_childs	debugger.py	/^  def xml_stringfy_childs(self, node, level = 0):$/;"	m	class:VimWindow
